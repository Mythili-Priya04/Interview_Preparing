1)--QUE:What is the difference between Stored Procedure and function?
--Ans:
-- SP may or may not return a value but function must return a value  
-- SP can have input/output parameters but  function can have only input parameter
-- we can call function inside sp but cannot call sp from a function
-- we cannot use sp in sql statments like SELECT,UPDATE,INSERT,DELETE,MERGE,etc.but we can use them with function


--Stored Procedure Example:

-- Create a Stored Procedure with input and output parameters
CREATE PROCEDURE GetEmployeeDetails
    @EmployeeID INT,
    @EmployeeName NVARCHAR(100) OUTPUT
AS
BEGIN
    -- Set the output parameter
    SELECT @EmployeeName = FirstName + ' ' + LastName
    FROM Employees
    WHERE EmployeeID = @EmployeeID;
END;

-- Call the stored procedure
DECLARE @EmpName NVARCHAR(100);
EXEC GetEmployeeDetails @EmployeeID = 1, @EmployeeName = @EmpName OUTPUT;
SELECT @EmpName AS EmployeeName;



--Function Example:

-- Create a Function to return an employee's full name
CREATE FUNCTION GetEmployeeName (@EmployeeID INT)
RETURNS NVARCHAR(100)
AS
BEGIN
    DECLARE @EmployeeName NVARCHAR(100);
    SELECT @EmployeeName = FirstName + ' ' + LastName
    FROM Employees
    WHERE EmployeeID = @EmployeeID;
    RETURN @EmployeeName;
END;

-- Use the function inside a SELECT statement
SELECT dbo.GetEmployeeName(1) AS EmployeeName;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2)-- QUE:What is the difference between primary key and unique key?

--ANS:
--(*)primary key
--  Primary key can't Accept Null Values
--  create clustered index
--  only one primary key in a table

--(*)Unique Key
--  Unique Key can Accept only one Null Value
--  create non-clustered index
--  more then one unique key in a table



-- Create a table with Primary Key and Unique Key
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,  -- Primary Key can't accept NULL values
    FirstName NVARCHAR(50) NOT NULL,
    LastName NVARCHAR(50) NOT NULL,
    Email NVARCHAR(100) UNIQUE, -- Unique Key can accept only one NULL value
    PhoneNumber NVARCHAR(15) UNIQUE  -- More than one unique key in a table
);

-- Inserting values into the Employees table
INSERT INTO Employees (EmployeeID, FirstName, LastName, Email, PhoneNumber)
VALUES (1, 'John', 'Doe', 'john.doe@example.com', '123-456-7890');

-- This will fail because EmployeeID is the primary key, and it can't accept NULL values
INSERT INTO Employees (EmployeeID, FirstName, LastName, Email, PhoneNumber)
VALUES (NULL, 'Jane', 'Smith', 'jane.smith@example.com', '987-654-3210');

-- This will succeed because Email and PhoneNumber are unique keys, and they can accept one NULL value
INSERT INTO Employees (EmployeeID, FirstName, LastName, Email, PhoneNumber)
VALUES (2, 'Jane', 'Smith', NULL, '987-654-3210');
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3)--QUE:What is the difference between clustered and non-clustered index?
--ANS:
--(*)clustered index:
-- A clustered index defines the order in which data is physically stored in a table for Ex: Dictionary
-- table data can have only one clustered index 
--Clustor index is faster

--(*)non-clustered index:
--A Non-Clustered index is stored at one place and table data is stored in another place.
--so this index is not physically stored Ex :Book index
-- table data can have Multiple non-clustered index 
--non-Clustor index is slower
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4)--QUE:What is the difference between  Delete ,Truncate and Drop commands? 
--Ans:
--(*)Delete:
--1)its a DML
--2)its used to delete the one or more rows  of a table
--3)it can be roolback

--query:
Delete from Employee where Emp_id=5;

--(*)TRUNCATE
--1)its a DDL
--2)its used to delete all rows from the table
--3)its can be rollback
--4)truncate will remove all the records from the table employee but not the structure  

truncate table Employee;

DROP

--1)it is a DDL
--2)It is used to drop the whole table with Structure/Schema  
--3)it can not be rollback                                  
--4)it will remove the structure/schema also                

Drop table Employee;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5)--QUE:What is Sub query or Nested query or Inner query in SQL?
--ANS:
-- A Subquery is a query with in another sql query and embedded within the WHERE clause

--Query:
select lastname,firstname
from employee
where officecode in (select officecode from office where country ='USA');
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

6)--QUE:What is self-join?
--ANS:
--A self join is a join table to itself

--Query:

SELECT e.firstname AS Employee,
M.FirstName AS Manager
FROM Employees E LEFT JOIN 
Employees M
ON E.ManagerID = M.EmployeeID;
order by manager;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7)--QUE:What is Cursor? why to Avoid them?
--ANS:
-- A database Cursor is a control which enables iteration over the rows or records in the table.

--5 STEP:
--1.Declare
--2.open
--3.Fetch using while loop
--4.Close
--5.Deallocate

--(*)why to Avoid them?
-- a cursor is memeory resident its occupies lots of memory from your system which is not good for performance

--Cursor Query:

-- Declare the cursor
DECLARE EmployeeCursor CURSOR FOR
SELECT EmployeeID, FirstName, LastName
FROM Employees
WHERE Department = 'Sales';

-- Declare variables to hold the fetched data
DECLARE @EmployeeID INT;
DECLARE @FirstName NVARCHAR(50);
DECLARE @LastName NVARCHAR(50);

-- Open the cursor
OPEN EmployeeCursor;

-- Fetch the first row from the cursor
FETCH NEXT FROM EmployeeCursor INTO @EmployeeID, @FirstName, @LastName;

-- Use a WHILE loop to iterate through the cursor rows
WHILE @@FETCH_STATUS = 0
BEGIN
    -- Process the fetched data
    PRINT 'Employee ID: ' + CAST(@EmployeeID AS NVARCHAR) + 
          ', Name: ' + @FirstName + ' ' + @LastName;

    -- Fetch the next row
    FETCH NEXT FROM EmployeeCursor INTO @EmployeeID, @FirstName, @LastName;
END;

-- Close the cursor
CLOSE EmployeeCursor;

-- Deallocate the cursor
DEALLOCATE EmployeeCursor;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8)--QUE:What is Cursor? why to Avoid them?
--ANS:
-- A database Cursor is a control which enables iteration over the rows or records in the table.

--5 STEP:
--1.Declare
--2.open
--3.Fetch using while loop
--4.Close
--5.Deallocate

--(*)why to Avoid them?
-- a cursor is memeory resident its occupies lots of memory from your system which is not good for performance

--Cursor Query:

-- Declare the cursor
DECLARE EmployeeCursor CURSOR FOR
SELECT EmployeeID, FirstName, LastName
FROM Employees
WHERE Department = 'Sales';

-- Declare variables to hold the fetched data
DECLARE @EmployeeID INT;
DECLARE @FirstName NVARCHAR(50);
DECLARE @LastName NVARCHAR(50);

-- Open the cursor
OPEN EmployeeCursor;

-- Fetch the first row from the cursor
FETCH NEXT FROM EmployeeCursor INTO @EmployeeID, @FirstName, @LastName;

-- Use a WHILE loop to iterate through the cursor rows
WHILE @@FETCH_STATUS = 0
BEGIN
    -- Process the fetched data
    PRINT 'Employee ID: ' + CAST(@EmployeeID AS NVARCHAR) + 
          ', Name: ' + @FirstName + ' ' + @LastName;

    -- Fetch the next row
    FETCH NEXT FROM EmployeeCursor INTO @EmployeeID, @FirstName, @LastName;
END;

-- Close the cursor
CLOSE EmployeeCursor;

-- Deallocate the cursor
DEALLOCATE EmployeeCursor;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

9)--QUE:What is Constraint is SQL ? what are its type.

--Ans:
--SQL constrains are used to specify rules for the data in table.
--constraints are used to limit the type of data that can go into a table

--1)PRIMARY KEY = is a field which can uniquely identify each row in a table
--2)NOT NULL = constraint tells that we cannot store a null values
--3)FOREIGN KEY REFERENCES = is a field which can uniquely identify each row in an another table.
--4)CHECK=constraint in helps to validate the values of a column to meet a particular condition
--5)DEFAULT = DEFAULT constrainer specifies a default value for the column when no value is specified by the user
--6)UNIQUE= constraint tells that all the values in the column must be unique


--Query:
Create table Students(ID int NOT NULL PRIMARY KEY,Name varchar(255) NOT NULL,CourseID int FOREIGN KEY REFERENCES Courses(CourseID),Age int NOT NULL CHECK(AGE>=18),AdmissionDate date DEFAULT GETDATE(),CONSTRAINT UC_Student UNIQUE(ID,Name) ); 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

10)--QUE:What is Clustered index?
--ANS:
-- A clustered index defines the order in which data is physically stored in a table
-- table data can be sorted in only way,therfore ,there can be only one clustered index per table
--if you set  a primary key on a column then it will automatically create  a clustered index on the particular column


--QUERY:

--1. Clustered Index with Primary Key

-- Create a table with a PRIMARY KEY (Clustered Index will be created automatically on EmployeeID)
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,  -- This will automatically create a Clustered Index on EmployeeID
    FirstName NVARCHAR(50),
    LastName NVARCHAR(50),
    Department NVARCHAR(50)
);


--2. Creating a Clustered Index Explicitly

-- Create a table without a primary key
CREATE TABLE Employees (
    EmployeeID INT,
    FirstName NVARCHAR(50),
    LastName NVARCHAR(50),
    Department NVARCHAR(50)
);

-- Create a Clustered Index explicitly on EmployeeID
CREATE CLUSTERED INDEX idx_EmployeeID
ON Employees (EmployeeID);


--3. What Happens if You Try to Create a Second Clustered Index?


-- Attempting to create a second Clustered Index on the same table (this will fail)
CREATE CLUSTERED INDEX idx_EmployeeID_2
ON Employees (FirstName);  -- Error: Cannot create more than one clustered index on a table



--4.-Example Query Using the Clustered Index:

-- Query that benefits from the clustered index on EmployeeID
SELECT * FROM Employees
WHERE EmployeeID BETWEEN 1 AND 10;  -- The query will be faster because of the clustered index on EmployeeID

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11)--QUE:What is Auto Increment / Identity column in sql server?
--ANS:
-- Auto-increment allows a unique number to be generate automatically when a new record is insert into a table
-- Mosttly it is the primary key only

--query:
 create table persons(ID int IDENTITY(1,1) PRIMARY KEY,firstname varchar(50),lastname varchar(50));
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12)-- QUE:What is a View:
--ANS:
--  A view in sql  is a VIRTUAL table that is based on the result of a sql query .
-- it does not stored data physically



--Query:
create view india_customer as
select customername,contactname 
from customer
where country ='india';

select * india_customer



--QUE:in a view querey is stored but the data is never stored like a table then why to use views
--ANS:
--1)indexed views to improve the performance 
--2)Extra security - DBA can hide the actual table names and expose views for read opertions

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

13)--QUE:What is Non-Clustered Index?
--Ans:
--A Non-Clustered index is stored at one place and table data is stored in another place.so this index is not physically stored
-- A table can have multiple non-clustered index in a table


--Step 1: Create a Table

-- Create a Products table
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,  -- Clustered index automatically created on ProductID
    ProductName NVARCHAR(100),
    Price DECIMAL(10, 2)
);


--Step 2: Create a Non-Clustered Index on the ProductName Column


-- Create a Non-Clustered Index on the ProductName column
CREATE NONCLUSTERED INDEX idx_ProductName
ON Products (ProductName);



--Step 3: Query Using the Non-Clustered Index

-- Query that will use the Non-Clustered Index on ProductName
SELECT * FROM Products
WHERE ProductName = 'Laptop';



--4.Handling Multiple Non-Clustered Indexes

-- Create another Non-Clustered Index on the Price column
CREATE NONCLUSTERED INDEX idx_Price
ON Products (Price);


--5.Dropping a Non-Clustered Index

-- Drop the Non-Clustered Index on ProductName
DROP INDEX idx_ProductName ON Products;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
14)--QUE:What are Trigger and Type of Triggers?
--Ans:
--Triggers are stored programs ,which are AUTOMATICLLY execute or fired when some events(insert,delete,and update)occur.

--Types of Triggers in SQL Server:

--DML Triggers (Data Manipulation Language Triggers):
--These triggers respond to changes made to the data in a table (e.g., INSERT, UPDATE, DELETE).

--AFTER Trigger: Executes after the data modification is completed.
--INSTEAD OF Trigger: Executes in place of the data modification.
--DDL Triggers (Data Definition Language Triggers):
--These triggers respond to events that alter the structure of a table (e.g., CREATE, ALTER, DROP).

--LOGON and LOGOFF Triggers:
--These triggers respond to user login and logout events in SQL Server (available in some versions).


--QUERY:
-- Create an example table for demonstration
CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName NVARCHAR(50),
    LastName NVARCHAR(50),
    Salary INT
);

-- Create an Audit Table to track changes
CREATE TABLE EmployeeAudit (
    AuditID INT IDENTITY PRIMARY KEY,
    EmployeeID INT,
    ChangeDate DATETIME,
    ChangeType NVARCHAR(10)
);

-- Create an AFTER Trigger that logs changes after an INSERT operation
CREATE TRIGGER trg_AfterEmployeeInsert
ON Employees
AFTER INSERT
AS
BEGIN
    -- Insert a record into the EmployeeAudit table when a new employee is added
    INSERT INTO EmployeeAudit (EmployeeID, ChangeDate, ChangeType)
    SELECT EmployeeID, GETDATE(), 'INSERT'
    FROM inserted;
END;


--2. INSTEAD OF Trigger:
--An INSTEAD OF Trigger is fired instead of the actual data modification (INSERT, UPDATE, or DELETE).

-- Create an INSTEAD OF Trigger for handling INSERT operations
CREATE TRIGGER trg_InsteadOfInsert
ON Employees
INSTEAD OF INSERT
AS
BEGIN
    -- Insert a new employee, but only if the Salary is greater than 0
    IF EXISTS (SELECT 1 FROM inserted WHERE Salary > 0)
    BEGIN
        -- Perform the insert as usual
        INSERT INTO Employees (EmployeeID, FirstName, LastName, Salary)
        SELECT EmployeeID, FirstName, LastName, Salary FROM inserted;
    END
    ELSE
    BEGIN
        -- Otherwise, do not insert and print a message
        PRINT 'Salary must be greater than 0. No rows were inserted.';
    END;
END;


--3. DELETE Trigger:
--You can create a trigger that fires after a DELETE operation is performed on a table.

-- Create a trigger to log deletions
CREATE TRIGGER trg_AfterEmployeeDelete
ON Employees
AFTER DELETE
AS
BEGIN
    -- Log the deletion into the EmployeeAudit table
    INSERT INTO EmployeeAudit (EmployeeID, ChangeDate, ChangeType)
    SELECT EmployeeID, GETDATE(), 'DELETE'
    FROM deleted;
END;


------------------------------------------------------------------------------------------------------------------------------------------------------------------------


15)--QUE:What are the type of joins in sql server?
--ANS:
--INNER JOIN: Returns only the rows with matching values in both tables.
--LEFT OUTER JOIN: Returns all rows from the left table and matching rows from the right table, with NULL where there is no match.
--RIGHT OUTER JOIN: Returns all rows from the right table and matching rows from the left table, with NULL where there is no match.
--FULL OUTER JOIN: Returns all rows when there is a match in one of the tables, with NULL for non-matching rows.


--:INNER JOIN QUERY:

-- Create two tables
CREATE TABLE Employees (
    EmployeeID INT,
    FirstName NVARCHAR(50),
    LastName NVARCHAR(50)
);

CREATE TABLE Departments (
    DepartmentID INT,
    DepartmentName NVARCHAR(50),
    EmployeeID INT
);

-- Insert some sample data
INSERT INTO Employees (EmployeeID, FirstName, LastName) VALUES
(1, 'John', 'Doe'),
(2, 'Jane', 'Smith'),
(3, 'Sam', 'Brown');

INSERT INTO Departments (DepartmentID, DepartmentName, EmployeeID) VALUES
(1, 'HR', 1),
(2, 'IT', 2),
(3, 'Finance', 4);

-- Inner Join to get employees and their departments (only matching rows)
SELECT Employees.EmployeeID, Employees.FirstName, Employees.LastName, Departments.DepartmentName
FROM Employees
INNER JOIN Departments ON Employees.EmployeeID = Departments.EmployeeID;


--LEFT OUTER JOIN QUERY:

-- Left Join to get all employees and their department (if any)
SELECT Employees.EmployeeID, Employees.FirstName, Employees.LastName, Departments.DepartmentName
FROM Employees
LEFT OUTER JOIN Departments ON Employees.EmployeeID = Departments.EmployeeID;



--RIGHT OUTER JOIN QUERY:

-- Right Join to get all departments and their employees (if any)
SELECT Employees.EmployeeID, Employees.FirstName, Employees.LastName, Departments.DepartmentName
FROM Employees
RIGHT OUTER JOIN Departments ON Employees.EmployeeID = Departments.EmployeeID;


--FULL OUTER JOIN QUERY

-- Full Outer Join to get all employees and all departments (with NULL where no match exists)
SELECT Employees.EmployeeID, Employees.FirstName, Employees.LastName, Departments.DepartmentName
FROM Employees
FULL OUTER JOIN Departments ON Employees.EmployeeID = Departments.EmployeeID;


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
16)--QUE: What are the difference between HAVING and WHERE Clause?
--ANS:
--(*)WHERE:
--  WHERE Clause is used before GROUP BY clause
--  WHERE Clause cannot contain AGGREGATE function
--(*)HAVING:
-- HAVING Clause is used after GROUP BY clause
-- HAVING  Clause can contain aggregate function
EX:  
select cutomername
from customer
group by cutomername
having sum (customersalary )>5;

--Query:
select count(CustomerID),Country
from customer
where country ="india"
group by country 
having count (CustomerID )>5;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
17)--QUE:What are joins in sql?
--ANS:
-- A joins is used to COMBINE row from two or more table ,based on a releted column between them

18)--QUE:What are Indexes in SQL Server?
--ANS:
--SQL index are used in relational databases to retrive data VERY FAST
--------------------------------------------------------------------------------------------------------------------------------------------------------------------



1. Explain normalization?
	a. Normalization is database design technique to remove redundant data.
	b. In transaction table : country like india,IND
2. How to implement Normalization?
	a. We splitting table in to two, one reference data(master table) and other one transaction data(foreign key reference)
3. Denormalization?
	a. Normalization is database design technique to improve search performance. We merge tables. Duplicate data is present denormalization.
4. Explain OLTP vs OLAP?
	a. Online transaction processing
		i. Insert update delete in this database
		ii. normalization
	b. Online analytical processing
		i. Select the data 
		ii. De-normalization data
	c. Once the data insert into OLTP then ETL inset data into OLAP
5. Explain 1st,2nd and 3rd normal form?
	a. A for 1st : all column should have atomic value and no repeating group
	b.  P for 2nd: any non-key column which is partial dependency on primary column.
	c. T for 3rd: any non-key column which not dependent on other non-key column.
	d. 1st normal from column have atomic values, it should not have repeating groups.
		i. Create different column for each field
		ii. First name ,last name, sure name in single column we not able to update the values individually.
	e. 2nd normal.
		i. All non-key column is should be fully depend on primary key
		ii. Below table we can remove the country name column because its depend on the country master table
		iii. Id	Country Id	Name Age Country Name
	f. 3rd: All 1st and 2nd satisfied and no Transient dependency should be present.
		i. Any non-key column should  not dependent on other non-key column
		ii. Below product cost is dependent on the product so we can remove product-cost on different table
		iii. Product	Product cost	size
		iv. Id	Name	Age	Product	product cost
6. Primary key is unique key?
	a. Both of them do not allow duplicate values
	b. Only one null allow unique key , primary key not allow null value
	c. One or more unique in table but one primary key table
7. What is the difference bw char varchar
	a. Char: fixed length(always take same length)
		i. If char length is 3 : value store in 2 letter 
	b. Varchar: variable length
8. Difference b/w char and nchar?
	a. Ncahr: Unicode and non-english char we can store
		i. One char take 2 bytes
	b. Char: only English letter store
		i. One char take 1 bye
9. What is use of index?
	a. Index increase search the performance.
	b. Internally create node and leaf node to reach the data quick.
	c. Book page is index
10. What are two types of index?
	a. Both index have balance tree structure.
	b. Clustered  index
		i. Leaf node will point to actual data.
	c. Non-clustered index
		i. Leaf node take help of clustered index to point a actual data.
11. Function vs  Store procedure?
	a. Function	Store procedure
		Compute values , but will not make any permanent changes to the environment.	
		Mostly scalar value, Table value function
		Can be called select, where, other stored procedure	
		SP:
		Mini batch program can change the environment. like insert update  delete
		Can not executed select, where
	 	Can have single or multiple outputs.
		
CREATE FUNCTION dbo.AddTwoNumbers
(
    @num1 INT,
    @num2 INT
)
RETURNS INT
AS
BEGIN
    RETURN @num1 + @num2;
END;

create function psbook()
Returns varchar(50)
as
begin
Return(select Title from  Books where BookId=1)
end


12. What are trigger and why we need it?
Create trigger triggername on  tablename after insert,update,delete 
As 
begin
insert into tablename values(getdata())
End
13. 1.Identity column in sql server?
	a. Auto Increment column which automatically increment the value
14. Explain transaction and how to implement it?
	a. Transaction  treats series activity as one single unit.
	begin try
	begin tran
		insert into tball values(getdate())
	commit tran
	end try
	begin catch
		Roolback
	end catch
15. Joins:
	a. Inner join select matching record from both table
	b. Left join : 
		i. How to find left table in query  left join left side 
		ii. Tablecustomer left join ms_country
		iii. All data from left table selected and only matching record from right table
	c. Right table:
		i. All data from right table selected and only matching record from left table
	d. Full outer join:
		i. All the matching and un matching records from broth left and right table selected.
	e. Cross join:
		i. Cross join don't have matching Id

16. Trigger ?
Create trigger triggername on  tablename after insert,update,delete 
As 
begin
insert into tablename values(getdata())
end


17. Begin tran syntax ?
begin try
begin tran
	insert into tball values(getdate())
commit tran
end try
begin catch
	rollback
end catch


18. duplicate record find and delete in sql and find nth highes values?
create table #temp(
Id int not null Identity(1,1),
Name varchar(25),
Salary decimal(18,0)
)

insert into #temp values ('mari','9000'),('ravi','8000'),('jack','8500'),('prask','9500')

select *from #temp

with topserond as
(
select Name,salary,ROW_NUMBER() over(order by salary desc) as rownumber from #temp
)
select *from topserond where rownumber=2

select *from #temp


with duplicatedelet as
(
select Name,salary,ROW_NUMBER() over(partition by Name order by Name,salary)as deldata from #temp
)

delete from duplicatedelet where deldata >1

SQL Interview Questions & Answers - Part 2 :-
25:-Why do we need UNION ?
	a.To combine the two or more slect statement into a single result.
	
26:-Differentiate between Union vs Union All ?
	a.union remvoe duplicate records and union all does not remove duplicate records.
	b. union performace  slower , union all performance faster.

-- UNION
SELECT name, age FROM customers WHERE country = 'USA'
UNION
SELECT name, age FROM customers WHERE country = 'UK';

-- UNION ALL
SELECT name, age FROM customers WHERE country = 'USA'
UNION ALL
SELECT name, age FROM customers WHERE country = 'UK';
	
27:-can we have unequal columns in Union?
	a.yes, the column in the two select statment must have a same datatype.
	
28:-Can column have different data types in Union ?
	a. No, columnn cannpt have different datatypes in a union query.
	
29:- Which Aggregate function have you used ?
	a. mean(),std(),count(),sum(),min(),max()
30:- When to use Group by ?
	a.we need to summarize the data by specifi column.
	b.find the total sale of each product,  count the number of customer in country.
	
SELECT product_id, SUM(quantity_sold) AS total_sales
FROM orders
GROUP BY product_id;

31:- Can we select column which is not part of group by ?
	a.its throwing error, in order to avoid that we can use any aggreate function on other select column.
	
32:- What is having clause ?
		a. its used to filter the result set of group by query.
		
33:- Having clause vs Where clause?
		a. where clause used to filter individual rows, having clause used by group of rows.
		b. where used any types of column and having used aggregate function only.
		
34:- How can we sort records ?
		a. using order by clause to sort the result of query in asce/desc.
		
35:- Whats the default sort ?
	a.sql server do not have any default sort order. 
	b. if you want sort we can use order by.
	
36:- How can we remove duplicates ?
	a. Distinct keyword used to remove duplicate values and only show unique values.
	b. group by also used to get unique values.
	c. question number 18 have ans. ( we use rownumber() partition by name order by name)

37:- Select the first top X records ?	
	a. use top 10 records  in select query
	b. Rownumber() also we can use to get top x record.
	
38:- How to handle NULLS ?
		a. while create a table column we can set not null constraint.
		
39:- What is use of wild cards ?
	 a. wilecards is special character that can be used to match multiple character in single string.
	 b. percentage: percent sign match any number of character ( using like '%sf%'
	 c.underscore: The underscore matches a single character.
	 
40:- What is the use of Alias ?
	a. AS keyword to create an alias.
	b.to avoid name conflicts and simpify complex queries.
	
41:- How to write a case statement ?
	select Name,
	case 
		when Salary <=8000 then 'Below 8K'
		when Salary >8000 then 'more 8K'
		end as 'salary range'
	from #temp
	
42:- What is self reference tables ?
	 a. table have foreign key that reference own primary key.
	 b.Manager and employee both in one table is called self reference table.
	CREATE TABLE employees (
	  employee_id INT NOT NULL AUTO_INCREMENT,
	  manager_id INT NULL,
	  name VARCHAR(255) NOT NULL,
	  PRIMARY KEY (employee_id),
	  FOREIGN KEY (manager_id) REFERENCES employees(employee_id)
	);

43:- What is self join ?
	a. self join used to querying and analyzing the data into single table.
	b. eg: above question.

44:- Explain the between clause ?
	a.the between clause used to retrive the data from start and end.
	b.You can use between in conjection with sql operator and or not
	c. select *from customer where order_total between 100 and 200;

SQL Interview Questions & Answers - Part 3 :-

45:- Explain SubQuery?
	a.sub query ia sql query that is nested inside the another sql query.
	b.sub query used in select , form, where having, order by

46:- Can inner Subquery return multiple results?
	 a. Yes, an inner subquery can return multiple results.
	 
47:- What is Co-related Query?
	 a.A correlated subquery is a subquery that references a column in the outer query. 
	 b.This means that the inner subquery is executed once ,for each row in the outer query. 

SELECT CustomerID, CustomerName
FROM Customers c
WHERE (
    SELECT COUNT(*)
    FROM Orders o
    WHERE o.CustomerID = c.CustomerID
) > 1;

	 
48:- Differentiate between Joins and SubQuery?
Joins:
	a.Combine data from two or more tables based on a common field.
	b.Generally faster than subqueries, especially for large datasets.
sub query:	
	a.Filter the results of an outer query, or perform complex calculations.
	b.Generally slower than joins, especially for complex subqueries.

49:- Performance Joins vs SubQuery?
	a.Generally faster than subqueries, especially for large datasets.
	b.Generally slower than joins, especially for complex subqueries.

SQL Server Interview Questions & Answers - Part 4 :-5
50:- Find NTH Highest Salary in SQL.

SQL Server  Interview Questions & Answers - Part 5
51:-  Select the top nth highest salary using correlated Queries?
52:-  Select top nth using using TSQL
53:-  Performance comparison of all the methods.

54. column into row?

select Id,Attribute,value from(
select Id,Name,Salary from #temp
)p
UNPIVOT(
value for Attribute in (Name)
) as unpvt

55.date conversion?
select convert(varchar,GETDATE(),103) --dd/mm/yyyy
select convert(varchar,GETDATE(),101)--mm/dd/yyyy
select FORMAT(GETDATE(),'dd/MM/yyyy') as dateformat --13/10/2023
select FORMAT(GETDATE(),'dd/MM/yy') as dateformat --13/10/23
select FORMAT(GETDATE(),'dd MMMM yy') as dateformat --13 October 23

Query Optimization:
Set no count on => remove the message form when query execute
Isolation level:
  Set Isolation level re un commited/ No lock
Missing Index=>
Scaler Function:
Covering index=> include help of index
Partition => splitting table data into multiple files
Indexing => retrieve the data quicker(create index indexname on table(columnae)
Replace with union to union all(there is no duplicate)
Select * instead of select column if requirement to use top 
Minimum use of distinct (to avoid )
!= <> index not working use IS Not Equal 
Use If exist for record is present => don't use select count()
Use like operator wisely =>if start with a use "%a"
Avoid multiple join => use CTE



Temp table:
Temp tables are created in the runtime and these tables are physically created in the tempdb database.
Temp tables are similar to normal tables and also have constraints, keys, indexes, etc. We can perform all operations in the temp table like a normal table.
The name of the temp table can have a maximum of 116 characters.
The structure of temp table can be altered after creating it.
You cannot use temp tables in User Defined Functions (UDF).
If the size of the temporary data is huge (more than 100 rows).


Temp Variable:
If you don’t want to alter the table structure after creating it.
Table variable is a special kind of data type and is used to store the result set. 
The scope of temp variable is limited to the current batch and current Stored Procedure. It will delete once comes out the batch (Ex. Stored Procedure).
We cannot create non-clustered index. It can only have indexes that are automatically created with PRIMARY KEY and UNIQUE constraints as part of the creation
Temp Variable is also created in the tempdb database but not the memory.
To store the temporary data in user-defined functions (UDF), stored procedures, and query batches.
We cannot use "Select * into"  statement for temp variable to store the values.
If the volume of data is less, say less than 100 rows. 


CTE:
It is used to hold the temporary result set or result of complex sub-query.
The scope of CTE is limited to the current query.
CTE improves readability and ease in the maintenance of complex queries and sub-queries. 
